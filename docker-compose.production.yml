version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: audiobooker-db-prod
    environment:
      POSTGRES_USER: ${DB_USER:-audiobooker}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-audiobooker_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U audiobooker"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - audiobooker-network

  # Redis for task queue and caching
  redis:
    image: redis:7-alpine
    container_name: audiobooker-redis-prod
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - audiobooker-network

  # FastAPI Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: audiobooker-api-prod
    env_file:
      - ./backend/.env.production
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-audiobooker}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-audiobooker_db}
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
      - ./storage_sdk:/app/storage_sdk:ro
    restart: unless-stopped
    networks:
      - audiobooker-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: audiobooker-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - audiobooker-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  audiobooker-network:
    driver: bridge
